class CircularLinkedListMain
{
    public static void main(String[]args)
    {
        CircularLinkedList<String> L=new CircularLinkedList<>();
        L.insertatbegining("Anand");
         L.insertatbegining("murugan");
        L.insertatend("ajith");
        L.insertatend("ram");
        L.insertatend("kav");
       // L.deleteatbegining();
        //L.deleteatend();
        //L.deletevalue("ram");
        L.insertafter("murugan","kii");
       L.display();
        L.size();
    }
}
class CircularLinkedList<T>
{
     Node last;
     CircularLinkedList()
     {
        last=null;
     }
     class Node
     {
        T data;
        Node next;
        Node(T value)
        {
            data=value;
            next=null;
        }
     }
     public void insertatbegining(T value)
     {
        if(last==null)
       {
         Node newnode=new Node(value);
         last=newnode;
         newnode.next=last;
       }
       else
       {
        Node newnode=new Node(value);
        newnode.next=last.next;
        last.next=newnode;
       }
     }
     public void insertatend(T value)
     {
        if(last==null)
       {
         Node newnode=new Node(value);
         last=newnode;
         newnode.next=last;
       }
       else
        {
        Node newnode=new Node(value);
        newnode.next=last.next;
        last.next=newnode;
        last=newnode;
       }
     }
     public void display()
     {
        if(last==null)
        throw new IndexOutOfBoundsException("enmpty list");
        else
        {
            Node temp=last.next;
            do{
                System.out.print(temp.data+" ");
                temp=temp.next;
            }while(temp!=last.next);
            
        }
     }
     public void deleteatbegining()
     {
        if(last==null)
        throw new IndexOutOfBoundsException("No elements to delete");
        if(last.next==last)
        last=null;
        else
        last.next=last.next.next;
     }
     public void deleteatend()
     {
        if(last==null)
        throw new IndexOutOfBoundsException("No element to delete");
        if(last.next==last)
        last=null;
        else
        {
            Node temp=last.next;
            while(temp.next!=last)
            {
                temp=temp.next;
            }
            temp.next=last.next;
            last=temp;

        }
     }
     public void deletevalue(T value)
     {
        if(last==null)
        throw new IndexOutOfBoundsException("No element to delete");
        if(last.next==last)
        {
            if(last.data==value);
            last=null;

        }
        else{
            Node temp=last.next;
            Node pre=last;
            do{
                if(temp.data==value)
                {
                    pre.next=temp.next;
                    if(temp==last)
                    last=pre;
                    return;
                }
                else{
                    pre=temp;
                    temp=temp.next;
                }
            }while(temp.next!=last.next.next);
         
      }
     }
     public void insertafter(T value,T value1)
     {
           Node temp=last.next;
           
            do{
                if(temp.data==value)
                {
                    Node newnode=new Node(value1);
                    if(temp==last)
                    {
                        last=newnode;
                    }
                        newnode.next=temp.next;
                        temp.next=newnode;
                        return;
                    
                }
                else{
                   
                    temp=temp.next;
                }
            }while(temp.next!=last.next.next);
     }
     public void size()
     {
        if(last==null)
        System.out.print("-1");
        else{
            int size=0;
            Node temp=last.next;
            do{
                size++;
                temp=temp.next;
            }while(temp.next!=last.next.next);
            System.out.println();
            System.out.print(size);
        }
     }
     
}
